load("@rules_cc//cc:defs.bzl", "cc_binary")
load(
  ":defs.bzl",
  "kernel_build",
  "uboot_build",
  "linux_toolchain",
)
load("//make:make.bzl", "make")
load("//fip:fip.bzl", "fip")
load("@aspect_bazel_lib//lib:transitions.bzl", "platform_transition_filegroup")
load("@bazel_skylib//rules:select_file.bzl", "select_file")
load("//genimage:genimage.bzl", "hdimage")

linux_toolchain(
  name = "linux-toolchain-config-aarch64",
  target_cc_toolchain = "@arm_none_linux_gnueabihf//toolchain:cc_toolchain_linux_aarch64_arm",
)

linux_toolchain(
  name = "linux-toolchain-config-x86_64",
  target_cc_toolchain = "@arm_none_linux_gnueabihf//toolchain:cc_toolchain_linux_x86_64_arm",
)

toolchain(
  name = "linux-toolchain-aarch64",
  toolchain = ":linux-toolchain-config-aarch64",
  toolchain_type = "//kbuild:toolchain_type",
  exec_compatible_with = [
    "@platforms//cpu:aarch64",
    "@platforms//os:linux",
  ],
  target_compatible_with = [
    "@platforms//os:linux",
    "@platforms//cpu:aarch32",
  ],
  visibility = ["//visibility:public"],
)

toolchain(
  name = "linux-toolchain-x86_64",
  toolchain = ":linux-toolchain-config-x86_64",
  toolchain_type = "//kbuild:toolchain_type",
  exec_compatible_with = [
    "@platforms//cpu:x86_64",
    "@platforms//os:linux",
  ],
  target_compatible_with = [
    "@platforms//os:linux",
    "@platforms//cpu:aarch32",
  ],
  visibility = ["//visibility:public"],
)

# NOTE: Can use this to match u-boot and linux toolchains later
# constraint_setting(name = "kbuild_flavor")
#
# constraint_value(
#   name = "kbuild_uboot",
#   constraint_setting = ":kbuild_flavor",
# )

kernel_build(
  name = "linux",
  srcs = ["@linux//:sources"],
  defconfig = "multi_v7_defconfig",
  image = "zImage",
  dtb = "stm32mp157d-dk1.dtb",
  # TODO: Should be possible to pull these from CcToolchain?
  arch = "arm",
  cross_compile = "arm-none-linux-gnueabihf-",
)

select_file(
  name = "zImage",
  srcs = ":linux",
  subpath = "zImage",
  visibility = ["//visibility:public"]
)

uboot_build(
  name = "uboot",
  srcs = ["@u-boot//:sources"],
  defconfig = "stm32mp15_defconfig",
  image = "u-boot-nodtb.bin",
  # NOTE: Missing extension here is intentional.
  dtb = "stm32mp157d-dk1",
  arch = "arm",
  cross_compile = "arm-none-linux-gnueabihf-",
  # exec_compatible_with = [
  #   ":kbuild_uboot",
  # ]
)

select_file(
  name = "u-boot.bin",
  srcs = ":uboot",
  subpath = "u-boot.bin",
  visibility = ["//visibility:public"]
)

make(
  name = "optee",
  env = {
    'CROSS_COMPILE': 'arm-none-linux-gnueabihf-',
    'ARCH': 'arm',
    'PLATFORM': 'stm32mp1-157D_DK1',
    'CFG_EMBED_DTB_SOURCE_FILE': 'stm32mp157d-dk1.dts',
  },
  srcs = ["@optee//:sources"],
  builddir_variable = "O",
  outputs = [
    'core/tee-header_v2.bin',
    'core/tee-pager_v2.bin',
    'core/tee-pageable_v2.bin',
  ],
  targets = ["all"],
  target_compatible_with = [
    "@platforms//os:linux",
    "@platforms//cpu:aarch32",
  ],
  visibility = ["//visibility:public"],
)

make(
  name = "trusted_firmware_a",
  # TF-A build system ignores these variables when they're set in the
  # environment.
  args = [
    'CROSS_COMPILE=arm-none-eabi-',
    'PLAT=stm32mp1',
    'ARCH=aarch32',
    'AARCH32_SP=optee',
    'ARM_ARCH_MAJOR=7',
    'DTB_FILE_NAME=stm32mp157d-dk1.dtb',
    'STM32MP_SDMMC=1',
  ],
  srcs = ["@bl2//:sources"],
  builddir_variable = "BUILD_BASE",
  outputs = [
    "stm32mp1/release/tf-a-stm32mp157d-dk1.stm32",
    "stm32mp1/release/tf-a-stm32mp157d-dk1.map",
    "stm32mp1/release/fdts/stm32mp157d-dk1-fw-config.dtb",
  ],
  targets = ["", "dtbs"],
  target_compatible_with = [
    "@platforms//os:none",
    "@platforms//cpu:aarch32",
  ],
)

platform_transition_filegroup(
    name = "bl2",
    srcs = [":trusted_firmware_a"],
    target_platform = "//platforms:cortex-a7-baremetal",
)

select_file(
  name = "tf-a-stm32mp157d-dk1.stm32",
  srcs = ":bl2",
  subpath = "tf-a-stm32mp157d-dk1.stm32",
)

cc_binary(
  name = "init",
  srcs = ["main.cpp"],
  target_compatible_with = [
    "@platforms//os:linux",
    "@platforms//cpu:aarch32",
  ],
  linkopts = ["-lstdc++"],
  visibility = ["//visibility:public"],
)

select_file(
  name = "tee-header_v2.bin",
  srcs = ":optee",
  subpath = "tee-header_v2.bin",
)

select_file(
  name = "tee-pager_v2.bin",
  srcs = ":optee",
  subpath = "tee-pager_v2.bin",
)

select_file(
  name = "tee-pageable_v2.bin",
  srcs = ":optee",
  subpath = "tee-pageable_v2.bin",
)

select_file(
  name = "u-boot-nodtb.bin",
  srcs = ":uboot",
  subpath = "u-boot-nodtb.bin",
)

select_file(
  name = "stm32mp157d-dk1-fw-config.dtb",
  srcs = ":bl2",
  subpath = "stm32mp157d-dk1-fw-config.dtb",
)

select_file(
  name = "u-boot.dtb",
  srcs = ":uboot",
  subpath = "u-boot.dtb",
)

fip(
  name = "fip.bin",
  tos_fw = ":tee-header_v2.bin",
  tos_fw_extra1 = ":tee-pager_v2.bin",
  tos_fw_extra2 = ":tee-pageable_v2.bin",
  nt_fw = ":u-boot-nodtb.bin",
  fw_config = ":stm32mp157d-dk1-fw-config.dtb",
  hw_config = ":u-boot.dtb",
)

hdimage(
  name = "sdcard.img",
  partition_table_type = "gpt",
  fsbl1 = {
    'image': ":tf-a-stm32mp157d-dk1.stm32",
  },
  fsbl2 = {
    'image': ":tf-a-stm32mp157d-dk1.stm32",
  },
  fip = {
    'image': ":fip.bin",
  },
  u_boot_env = {
    # Matches CONFIG_ENV_OFFSET in U-Boot
    'offset': '0x900000',
    # Matches CONFIG_ENV_SIZE in U-Boot
    'size': '0x2000',
  },
  u_boot_env_red = {
    # Matches CONFIG_ENV_OFFSET_REDUND in U-Boot
    'offset': '0x940000',
    # Matches CONFIG_ENV_SIZE in U-Boot
    'size': '0x2000',
  },
)
